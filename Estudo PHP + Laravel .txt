Estudo PHP + Laravel 

##Comandos de criação do projeto e arquivos##

Criação do projeto: composer create-project laravel/laravel:^10.0 nomeProjeto
Criação do controller: php artisan make:controller NomeController
Criação do model = php artisan make:model NomeModel
Criação do model e migration = php artisan make:model NomeModel -m
Criação da migration = php artisan make:migration metodo_nome_migration
Criação das seeders = php artisan make:seeder NomeSeeder

Execução das migrations = php artisan migrate
Execução rollback migrations = php artisan migrate:rollback --step= (quantidade de passos)

Verificação do status das migrations = php artisan migrate:status

Reverter todas as migrates do banco = php artisan migrate:reset
Reverter todas as migrates e executar todas as migrates novamente = php artisan migrate:refresh

Faz o drop de todos os objetos do banco e executa as migrates novamente = php artisan migrate:fres

Entrar dentro do painel do tinker = php artisan tinker

Iniciar banco de dados: php -S localhost:3000
Iniciar aplicação artisan: php artisan serve

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Pastas do projeto##

public = aqui deve ficar todos os arquivos que podem ser acessados de qualquer parte do projeto, fotos, videos, arquivos de áudio...
routes = aqui é onde é configurado todas as rotas da aplicação
resources = aqui é onde a parte visual do projeto vai ser configurada
app = aqui é onde vai ser configurado os controllers e models do projeto (parte back-end)
database = aqui é onde vai ser configurado as migration e a factory do banco de dados

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Operador ternario##

condição ? se verdade : se falso
Exemplo: isset($fornecedores[1]['cnpj]) ? 'CNPJ informado' : 'CNPJ não informado';

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Variaveis e objetos##

$loop = ao utilizar os loops foreach e forelse, o Blade disponibiliza o objeto loop, com esse objeto, é possivel ter acesso a vários tipos de dados do loop, como numero de iterações, se é a primeira ou ultima, para saber mais use: @dd($loop)

$slot = essa variavel é responsavel por definir onde sera renderizado todo o parametro HTML incluido dentro do bloco de código component gerado na view, 
use: {{ $slot }}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Funções PHP##

assets = tudo que é anexo a uma página html é um asset (imagens, sons, videos, fontes, css e js)
Exemplo:                       <img src="{{ asset('img/mapa.png')}}">

route = função que retorna a rota que o usuario sera enviado, nessa função, você pode atribuir a roda pelo nome dado a ela 
Exemplo:                       <li><a href="{{ route('principal') }}">Principal</a></li>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Comandos##

{{-- --}} = Comentário no blade

@if( ) = Comando de if do blade, inicio de condição

@endif = Comando usando para fechar o bloco da condição if

@elseif( ) = Comando utilizado para iniciar outra condição no if, não precisa de fechamento

@else = Comando para iniciar ultima condição do if, não precisa de fechamento

@unless( ) = Comando para inicio de condição, porem ela só sera executada se a condição for falsa.

@isset( ) = Comando para verificar se a variavel foi instanciada, se os dados estão setados dentro dela, caso não esteja, não interrompe o funcionamento da aplicação, pode ser usado também dentro de loops verificando se se o item de um array existe por exemplo, e se existir gerar o loop, inicio da condição

@endisset = Comando usado para a fechar o bloco da condição isset

@empty( ) = Comando para verificar se uma variavel está vazia, em PHP, uma variavel pode ser considerada vazia de várias formas, não precisa de fechamento

@switch( ) = Comando para iniciar condição por valor variavel, caso o valor variavel seja igual ao valor de um case, esse case sera executado

@case( ) = Comando que recebera as instruções de execução

@break = Comando para finalizar instruções do case, com isso a condição switch é finalizado

@endswitch = Comando usado para fechar o bloco de condição switch

@for( ) = Comando usado para criar um loop onde você sabe a quantidade de vezes que ele deve ser executado

@endfor = Comando usado para fechar o bloco de loop for

@while( ) = Comando usado para criar um loop de enquanto a instrução for verdadeira

@endwhile = Comando usado para fechar o bloco de loop while

@foreach( ) = Comando usado para criar um loop de array, com ele, percorrer arrays fica muito mais simples

@endforeach = Comando usado para fechar o bloco de loop foreach

@forelse( ) = Comando semelhante ao loop foreach, porem, leva com ele a instrução de caso o array esteja vazio, execute outra instrução

@endforelse = Comando usado para fechar o bloco de loop forelse

@extends( ) = Comando utilizado para determinar a template que sera utilizada na view 

@section( ) = Comando utilizado para envio dos blocos de codigo html para o template extendido

@endsection = Comando utilizado para fechar o bloco de código section

@yield( ) = Comando utilizado para indicar para o template extendido, onde os blocos html das sections devem ser renderizados

@include( ) = Comando utilizado para fazer a inclusão direta de um bloco de código no arquivo

@csrf = Comando utilizado para criar token CSRF, é um mecanismo de segurança usado para proteger aplicativos da Web contra ataques CSRF.

@component( ) = Comando utilizado para gerar um componente para ser utilizado nas views, diferente do comando include, um component, pode receber parametros html, esses parametros sendo renderizados atráves da variavel $slot dentro dos arquivos do component

@endcomponent = Comando utilizado para fechar o o bloco de código component

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Tinker e Eloquent ORM

Metodos Tinker

Metodo use = Com o metodo use, é possivel acessar uma tabela no banco de dados
Exemplo: use \App\Models\NomeModel

Metodo create = Com o metodo create, é possivel fazer o envio de dados direto para o banco de dados
Exemplo: \App\Models\NomeModel:: create(['dados aqui em array associativo']);	

Metodo all() = Com o metodo all, é possivel retornar todos os registros de dados presente na tabela associada ao modelo.
Exemplo: $nomeVariavel = \App\Models\NomeModel::all(); 

Metodo find() = Com o metodo find, é possivel retornar um ou mais registros do banco de dados, buscando pela primaray key desse registro
Exemplo: $nomeVariavel = \App\Models\NomeModel:find(1);  //caso a primary key dele seja um id, ira buscar o id 1 na tabela 

Metodo where() = Com o metodo where, é possivel retornar vários registro do banco de dados atraves de uma condição
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::where('coluna','condicao',valor)
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel:where('coluna','condicao',valor)->get();

Metodo whereIn() = Com o metodo whereIn, é possivel retornar vários registros do banco de dados atráves de uma condição especifica = Ira retornar os valores 1 e 3
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereIn('coluna_a_ser_comparada_por_igual','conjunto_de_parametros');
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereIn('coluna_a_ser_comparada_por_igual','conjunto_de_parametros')->get();
Exemplo pratico: $contatos = /App/Models/SiteContato::whereIn('motivo_contato',[1,3])->get();

Metodo whereNotIn() = Com o metodo whereNotIn, é possivel retornar vários registros do banco de dados atráves de uma condição especifica = Ira retornar todos menos os valores 1 e 3
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereNotIn('coluna_a_ser_comparada_por_igual','conjunto_de_parametros');
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereNotIn('coluna_a_ser_comparada_por_igual','conjunto_de_parametros')->get();
Exemplo pratico: $contatos = \App\Models\SiteContato::whereNotIn('motivo_contato',[1,3])->get();

Metodo whereBetween() = Com o metodo whereBetweeen, é possivel retornar vários registros do banco de dados atráves de um intervalor especifico = Ira retornar todos do intervalor entre 1 e 3
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereBetween('coluna', 'conjunto de parametros');
Exemplo de retorno Collection: $nomeVarivel = \App\Models\NomeModel::whereBetween('coluna', 'conjunto de parametros')->get();
Exemplo pratico: $contatos = \App\Models\NomeModel::whereBetween('id', [1,3])->get(); 

Metodo whereNotBetween() = Com o metodo whereNotBetween, é possivel retornar vários registros do banco de dados atráves de um intervalo especifico = Ira retoranar o intervalor de todos menos o 1 e 3 
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereNotBetween('coluna', 'conjunto de parametros');
Exemplo de retorno Collection: $nomeVarivel = \App\Models\NomeModel::whereNotBetween('coluna', 'conjunto de parametros')->get();
Exemplo pratico: $contatos = \App\Models\NomeModel::whereNotBetween('id', [1,3])->get();

Metodo whereNull() = Com o metodo whereNull, é possivel retornar vários registros do banco que possuem colunas vazias (Null)
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereNull('coluna');
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereNull('coluna')->get();
Exemplo pratico: $contatos = \App\Models\SiteContato::whereNull('updated_at')->get();

Metodo whereNull() = Com o metodo whereNotNull, é possivel retornar vários registros do banco que não possuem colunas vazias (Null)
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereNotNull('coluna');
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereNotNull('coluna')->get();
Exemplo pratico: $contatos = \App\Models\SiteContato::whereNotNull('updated_at')->get();

Metodo whereDate() = Com o metodo whereDate, é possivel retornar vários registros do banco de dados atráves de condições de datas (também é possivel buscar por dias, usando whereDay, buscar por anos, usando whereYear, buscar por meses usando whereMouth)
Exemplo de retorno Builder: $nomeVariavel =  \App\Models\NomeModel::whereDate('coluna', data);
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereDate('coluna', data)->get();
Exemplo de retorno pratico: $contatos = \App\Models\SiteContato::whereDate('created_at', '2024-03-18')->get();

Metodo whereTime() = Com o metodo whereTime, é possivel retornar vários registros do banco de dados atráves de condições de horarios
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereTime('coluna', 'operador', 'horario');
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereTime('coluna', 'operador', 'horario');
Exemplo de retorno pratico: $contatos = \App\Models\SiteContato::whereTime('created_at', '=', '10:44:00')->get();

Metodo whereColumn() = Com o metodo whereColumn, é possivel retornar vários registros do banco de dados atráves da comparação entre colunas
Exemplo de retorno Builder: $nomeVariavel = \App\Models\NomeModel::whereColumn('coluna1', 'operador', 'coluna2');
Exemplo de retorno Collection: $nomeVariavel = \App\Models\NomeModel::whereColumn('coluna', 'operador', 'coluna2')->get();
Exemplo de retorno pratico: $contatos = \App\Models\NomeModel::whereColumn('created_at', '<>', 'updated_at')->get();

Utilizando vários metodos where dentro de uma consulta where // Retorna os dados se todas as condições forem verdadeiras
Exemplo pratico: $contatos = \App\Models\SiteContato::where('nome', '<>', 'Fernando')->whereIn('motivo_contato', [1,2])->whereBetween('created_at', ['2024-03-18 00:00:00', '2024-03-19 00:00:00'])->get();

Utilizando vários metodos orWhere // Retorna os dados se todos ou uma condição for verdadeira (sempre usar o orWhere a esquerda)
Exemplo pratico: $contatos = \App\Models\SiteContato::where('nome', '<>', 'Fernando')->orWhereIn('motivo_contato', [1,2])->orWhereBetween('created_at', ['', '2024-03-19 00:00:00'])->get();

Utilizando precedência em operações lógicas // Gerar uma ordem de execução das condições    
Exemplo de retorno pratico: 
$nomeVariavel = \App\Models\NomeModel::where(function($query){ $query->where('nome', 'Jorge')->orWhere('nome','Ana'); })
					->where(function($query){$query->whereIn('motivo_contato', [1,2])->orWhereBetween('id', [4,6); })->get(); 

Metodo orderBy() = Com o metodo orderBy, é possivel fazer ordenação dos indices da tabela por coluna e ordem crescente ou decrescente 
Exemplo de retorno pratico: $contatos = \App\Models\SiteContato::orderBy('nome','asc')->get();

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


//Manipulação e metodos Collections 

você sempre vai fazer o comando pelo nome da Model, você pode selecionar quais indices ou se todos os indices vão ser manipulados 
Exemplo: SiteContato::all();

all(); = retorna todos os indices da collection

first(); = retorna o primeiro indice da collection

last(); = retorna o ultimo indice da collection

reverse(); = inverte a ordem dos indices dentro da collection

toArray(); = converte a collection em um objeto do tipo array

toJson(); = converte a coleection em um objeto do tipo json

pluck(); = retorna a coluna selecionada de todos os indices da collection, 2 parametros, um para o valor do indice, o segundo para o nome do indice 
Exemplo: SiteContato::all()->pluck('email','nome');

fill(); = envia dados para o objeto atráves de um array associativo 

save(); = persisti os dados enviados no método fill para o banco de dados

update(); = altera e persisti os indices passados por parametro para o banco de dados, não precisa do método save(); para persistir os dados

delete(); = deleta o indice no banco de dados, não precisa de parametro, é passado pela variavel que inicia o comando

destroy(); = deleta o indice no banco de dados, precisa ser passado o indice por parametro

forceDelete(); = apos a implementação do softDelete, para realmente apagar o registro de dados no banco, sera necessário no tinker, esse método não precisa de parametro, ele é passado pela variavel que inicia o comando

onlyTrashed(); = retorna somente todos os indices do banco de dados que possuem o deleted_ad preenchidos

restore(); = apaga o registro de deleted_at no banco, ativando novamente o registro no banco de dados, esse método não precisa de parametro, ele é passado pela variavel que inicia o comando

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Estudar Traits